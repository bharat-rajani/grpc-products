// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package products_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	GetVendorProductTypes(ctx context.Context, in *ClientRequestType, opts ...grpc.CallOption) (*ClientResponseType, error)
	GetVendorProducts(ctx context.Context, in *ClientRequestProducts, opts ...grpc.CallOption) (ProductService_GetVendorProductsClient, error)
	SetVendorProducts(ctx context.Context, opts ...grpc.CallOption) (ProductService_SetVendorProductsClient, error)
	ChatVendorSales(ctx context.Context, opts ...grpc.CallOption) (ProductService_ChatVendorSalesClient, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetVendorProductTypes(ctx context.Context, in *ClientRequestType, opts ...grpc.CallOption) (*ClientResponseType, error) {
	out := new(ClientResponseType)
	err := c.cc.Invoke(ctx, "/products.v1.ProductService/GetVendorProductTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetVendorProducts(ctx context.Context, in *ClientRequestProducts, opts ...grpc.CallOption) (ProductService_GetVendorProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProductService_serviceDesc.Streams[0], "/products.v1.ProductService/GetVendorProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceGetVendorProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_GetVendorProductsClient interface {
	Recv() (*ClientResponseProducts, error)
	grpc.ClientStream
}

type productServiceGetVendorProductsClient struct {
	grpc.ClientStream
}

func (x *productServiceGetVendorProductsClient) Recv() (*ClientResponseProducts, error) {
	m := new(ClientResponseProducts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) SetVendorProducts(ctx context.Context, opts ...grpc.CallOption) (ProductService_SetVendorProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProductService_serviceDesc.Streams[1], "/products.v1.ProductService/SetVendorProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceSetVendorProductsClient{stream}
	return x, nil
}

type ProductService_SetVendorProductsClient interface {
	Send(*AdminClientRequestProducts) error
	CloseAndRecv() (*ProductCount, error)
	grpc.ClientStream
}

type productServiceSetVendorProductsClient struct {
	grpc.ClientStream
}

func (x *productServiceSetVendorProductsClient) Send(m *AdminClientRequestProducts) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceSetVendorProductsClient) CloseAndRecv() (*ProductCount, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProductCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) ChatVendorSales(ctx context.Context, opts ...grpc.CallOption) (ProductService_ChatVendorSalesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProductService_serviceDesc.Streams[2], "/products.v1.ProductService/ChatVendorSales", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceChatVendorSalesClient{stream}
	return x, nil
}

type ProductService_ChatVendorSalesClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type productServiceChatVendorSalesClient struct {
	grpc.ClientStream
}

func (x *productServiceChatVendorSalesClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceChatVendorSalesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	GetVendorProductTypes(context.Context, *ClientRequestType) (*ClientResponseType, error)
	GetVendorProducts(*ClientRequestProducts, ProductService_GetVendorProductsServer) error
	SetVendorProducts(ProductService_SetVendorProductsServer) error
	ChatVendorSales(ProductService_ChatVendorSalesServer) error
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) GetVendorProductTypes(context.Context, *ClientRequestType) (*ClientResponseType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorProductTypes not implemented")
}
func (UnimplementedProductServiceServer) GetVendorProducts(*ClientRequestProducts, ProductService_GetVendorProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVendorProducts not implemented")
}
func (UnimplementedProductServiceServer) SetVendorProducts(ProductService_SetVendorProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetVendorProducts not implemented")
}
func (UnimplementedProductServiceServer) ChatVendorSales(ProductService_ChatVendorSalesServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatVendorSales not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_GetVendorProductTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequestType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetVendorProductTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.v1.ProductService/GetVendorProductTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetVendorProductTypes(ctx, req.(*ClientRequestType))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetVendorProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientRequestProducts)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetVendorProducts(m, &productServiceGetVendorProductsServer{stream})
}

type ProductService_GetVendorProductsServer interface {
	Send(*ClientResponseProducts) error
	grpc.ServerStream
}

type productServiceGetVendorProductsServer struct {
	grpc.ServerStream
}

func (x *productServiceGetVendorProductsServer) Send(m *ClientResponseProducts) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductService_SetVendorProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).SetVendorProducts(&productServiceSetVendorProductsServer{stream})
}

type ProductService_SetVendorProductsServer interface {
	SendAndClose(*ProductCount) error
	Recv() (*AdminClientRequestProducts, error)
	grpc.ServerStream
}

type productServiceSetVendorProductsServer struct {
	grpc.ServerStream
}

func (x *productServiceSetVendorProductsServer) SendAndClose(m *ProductCount) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceSetVendorProductsServer) Recv() (*AdminClientRequestProducts, error) {
	m := new(AdminClientRequestProducts)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProductService_ChatVendorSales_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).ChatVendorSales(&productServiceChatVendorSalesServer{stream})
}

type ProductService_ChatVendorSalesServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type productServiceChatVendorSalesServer struct {
	grpc.ServerStream
}

func (x *productServiceChatVendorSalesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceChatVendorSalesServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "products.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVendorProductTypes",
			Handler:    _ProductService_GetVendorProductTypes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVendorProducts",
			Handler:       _ProductService_GetVendorProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetVendorProducts",
			Handler:       _ProductService_SetVendorProducts_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatVendorSales",
			Handler:       _ProductService_ChatVendorSales_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "products.proto",
}
